#!/usr/bin/python
# -*- coding: utf-8 -*-
# vim: ts=4 
###
#
# Copyright (c) 2010 J. Félix Ontañón
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors : J. Félix Ontañón <fontanon@emergya.es>
# 
###

import sys
import gtk
import gobject

from udevdiscover.utils import GConfStore
from udevdiscover.udevicefinder import DeviceFinder

# FIXME: This path needs to be assigned at installing time
UDEVMAN_UI = 'udev-discover.ui'
GCONF_KEY = '/apps/udevman'

PATH_COL, ICON_COL, NAME_COL = range(3)

# Load icons
theme = gtk.icon_theme_get_default()
device_icon = theme.load_icon('gtk-dialog-question', 24, 0)

class UDevDiscoverGUI(GConfStore):

    defaults = {
            'width': 600,
            'height': 350,
            'hpaned': 150,
    }

    def __init__(self):
        GConfStore.__init__(self, GCONF_KEY)

        self.builder = gtk.Builder()
        if not self.builder.add_from_file(UDEVMAN_UI):
            raise 'Cant load %s' % UDEVMAN_UI
        self.builder.connect_signals(self)

        self.main_window = self.builder.get_object('main_window')
        self.devices_hpaned = self.builder.get_object('devices_hpaned')
        self.devices_tv = self.builder.get_object('devices_tv')
        self.devices_treestore = self.builder.get_object('devices_treestore')
        self.deviceprop_tv = self.builder.get_object('deviceprop_tv')
        self.deviceprop_store = self.builder.get_object('deviceprop_store')
        self.devicename_label = self.builder.get_object('devicename_label')
        self.devicedesc_label = self.builder.get_object('devicedesc_label')
        
        # About dialog
        self.about_dialog = self.builder.get_object('about_dialog')
        self.about_dialog.connect('response', lambda d, r: d.hide())

        # Store main window width/height
        def catch_window_size(widget, allocate, options):
            options['width'] = allocate.width
            options['height'] = allocate.height

        self.main_window.connect('size_allocate', catch_window_size, 
                self.options)

        self.loadconf()
        self.main_window.resize(self.options['width'], self.options['height'])
        self.devices_hpaned.set_position(self.options['hpaned'])
        
        # Populate treeview
        self.device_finder = DeviceFinder(['usb', 'pci', 'net', 'power_supply', 'block'])
        self.rows = {}
        self.populate(self.device_finder.get_devices())
        self.devices_tv.expand_all()
        
        self.main_window.show_all()

    def populate(self, devices):
        for device in devices:
            if device.parent == None:
                treeiter = self.devices_treestore.append(None, [device.path, 
                    device_icon, device.nice_label])
            else:
                if self.rows.has_key(device.parent.path):
                    parent_treeiter = self.devices_treestore.get_iter(
                        self.rows[device.parent.path].get_path())
                    treeiter = self.devices_treestore.append(parent_treeiter, 
                        [device.path, device_icon, device.nice_label])
                else:
                    treeiter = self.devices_treestore.append(None, [device.path, 
                        device_icon, device.nice_label])
                    
            self.rows[device.path] = gtk.TreeRowReference(self.devices_treestore,
                self.devices_treestore.get_path(treeiter))

    def devices_tv_cursor_changed_cb(self, treeview):
        selection = self.devices_tv.get_selection()
        model, selected = selection.get_selected()
        
        if selected:
            row = self.devices_treestore[selected]
            device = self.device_finder.get_devices_tree()[row[PATH_COL]]
            self.devicename_label.set_label('<b>'+device.nice_label+'</b>')
            desc = '\n'.join([': '.join(('<b>'+key.capitalize()+'</b>', val)) \
                for key, val in device.get_info().items()])
            self.devicedesc_label.set_label(desc)

            self.deviceprop_store.clear()
            for key, val in device.get_props().items():
                self.deviceprop_store.append([key,val])

    def about_action_activate_cb(self, widget):
        self.about_dialog.run()

    def help_action_activate_cb(self, widget):
        pass

    def quit_action_activate_cb(self, data=None):
        self.options['hpaned'] = self.devices_hpaned.get_position()
        self.saveconf()
        sys.exit(0)

if __name__ == '__main__':
    UDevDiscoverGUI()
    gobject.MainLoop().run()
