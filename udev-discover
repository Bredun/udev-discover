#!/usr/bin/python
# -*- coding: utf-8 -*-
# vim: ts=4 
###
#
# Copyright (c) 2010 J. Félix Ontañón
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors : J. Félix Ontañón <fontanon@emergya.es>
# 
###

import sys
import gtk
import gobject
import logging

from udevdiscover import DeviceFinder
from udevdiscover.utils import GConfStore, TextBufferHandler

# FIXME: This path needs to be assigned at installing time
UDEVMAN_UI = 'udev-discover.ui'
GCONF_KEY = '/apps/udevdiscover'

DEFAULT_SUBSYSTEMS = ['usb', 'pci', 'net', 'power_supply', 'block', 'sound', 
    'input', 'serio', 'platform', 'tty', 'pnp', 'drm', 'video4linux', 'rfkill',
    'bluetooth']

TEXTBUFFER_LOGGER = 'udevdiscover'
LOG_LEVEL = logging.DEBUG
LOG_FORMAT = '%(asctime)s %(levelname)s - %(message)s'
LOG_DATE_FORMAT = '%H:%M:%S'

PATH_COL, ICON_COL, NAME_COL = range(3)

# Load icons
theme = gtk.icon_theme_get_default()
device_icon = theme.load_icon('gtk-dialog-question', 24, 0)

class UDevDiscoverGUI(GConfStore):

    defaults = {
            'window_width': 600,
            'window_height': 400,
            'devices_hpaned': 150,
            'parent_tree': True,
            'expanded': True,
            'eventslog_vpaned': 350,
            'eventslog_expanded': True,
            'follownew': True,
            'followchanged': False,
    }

    def __init__(self):
        GConfStore.__init__(self, GCONF_KEY)
        self.rows = {}

        self.builder = gtk.Builder()
        if not self.builder.add_from_file(UDEVMAN_UI):
            raise 'Cant load %s' % UDEVMAN_UI
        self.builder.connect_signals(self)

        self.main_window = self.builder.get_object('main_window')
        self.devices_hpaned = self.builder.get_object('devices_hpaned')
        self.eventslog_vpaned = self.builder.get_object('eventslog_vpaned')
        self.devices_tv = self.builder.get_object('devices_tv')
        self.devices_treestore = self.builder.get_object('devices_treestore')
        self.deviceprop_tv = self.builder.get_object('deviceprop_tv')
        self.deviceprop_store = self.builder.get_object('deviceprop_store')
        self.devicename_label = self.builder.get_object('devicename_label')
        self.devicedesc_label = self.builder.get_object('devicedesc_label')
        self.parents_toolbtn = self.builder.get_object('parents_toolbtn')
        self.expand_toggleaction = self.builder.get_object('expand_toggleaction')
        self.eventslog_expander = self.builder.get_object('eventslog_expander')
        self.eventslog_textbuffer = self.builder.get_object('eventslog_textbuffer')
        self.follownew_toggleaction = self.builder.get_object('follownew_toggleaction')
        self.followchanged_toggleaction = \
            self.builder.get_object('followchanged_toggleaction')

        # About dialog
        self.about_dialog = self.builder.get_object('about_dialog')
        self.about_dialog.connect('response', lambda d, r: d.hide())

        # Store main window width/height
        def catch_window_size(widget, allocate, options):
            options['window_width'] = allocate.width
            options['window_height'] = allocate.height

        self.main_window.connect('size_allocate', catch_window_size, 
                self.options)

        self.loadconf()
        self.main_window.resize(self.options['window_width'], 
            self.options['window_height'])
        self.devices_hpaned.set_position(self.options['devices_hpaned'])
        self.eventslog_vpaned.set_position(self.options['eventslog_vpaned'])
        self.eventslog_expander.set_expanded(self.options['eventslog_expanded'])

        # Sets up the logger
        self.logger = logging.getLogger(TEXTBUFFER_LOGGER)
        self.logger.setLevel(LOG_LEVEL)
        handler = TextBufferHandler(self.eventslog_textbuffer)
        handler.setFormatter(logging.Formatter(LOG_FORMAT,
            datefmt=LOG_DATE_FORMAT))
        self.logger.addHandler(handler)

        # Populate treeview
        self.device_finder = DeviceFinder()
        self.device_finder.scan_subsystems(DEFAULT_SUBSYSTEMS, 
            self.options['parent_tree'])
        self.device_finder.connect('added', self.new_device)
        self.device_finder.connect('removed', self.removed_device)
        self.device_finder.connect('changed', self.changed_device)
        self.populate(self.device_finder.get_devices())

        self.parents_toolbtn.set_active(self.options['parent_tree'])
        self.expand_toggleaction.set_active(self.options['expanded'])
        self.expand_toggleaction_toggled_cb(self.expand_toggleaction)
        self.follownew_toggleaction.set_active(self.options['follownew'])
        self.followchanged_toggleaction.set_active(self.options['followchanged'])
        self.main_window.show_all()

    def new_device(self, device_finder, device):
        row_ref = self.add_new_device(device)

        if self.options['expanded']:
            self.devices_tv.expand_to_path(row_ref.get_path())

        if self.options['follownew']:
            self.devices_tv.set_cursor(row_ref.get_path())

        self.logger.info('Device added: %s' % device.nice_label)

    def removed_device(self, device_finder, device):
        if self.rows.has_key(device.path):
            ref_row = self.rows[device.path]
            treeiter = self.devices_treestore.get_iter(ref_row.get_path())
            self.devices_treestore.remove(treeiter)
            del(self.rows[device.path])

        self.logger.info('Device removed: %s' % device.nice_label)

    def changed_device(self, device_finder, device):
        if self.rows.has_key(device.path):
            ref_row = self.rows[device.path]
            treeiter = self.devices_treestore.get_iter(ref_row.get_path())
            self.devices_treestore.remove(treeiter)
            del(self.rows[device.path])

        self.logger.info('Device removed: %s' % device.nice_label)

    def populate(self, devices):
        self.devices_treestore.clear()
        self.rows = {}
        
        for device in devices:
            self.add_new_device(device)

    def add_new_device(self, device):
        if device.parent == None:
            treeiter = self.devices_treestore.append(None, [device.path, 
                device_icon, device.nice_label, device.subsystem])
        else:
            if self.rows.has_key(device.parent.path):
                parent_treeiter = self.devices_treestore.get_iter(
                    self.rows[device.parent.path].get_path())
                treeiter = self.devices_treestore.append(parent_treeiter, 
                    [device.path, device_icon, device.nice_label, 
                    device.subsystem])
            else:
                treeiter = self.devices_treestore.append(None, [device.path, 
                    device_icon, device.nice_label, device.subsystem])
        
        self.rows[device.path] = gtk.TreeRowReference(self.devices_treestore,
            self.devices_treestore.get_path(treeiter))

        return self.rows[device.path]

    def showparents_toggleaction_toggled_cb(self, action):
        self.options['parent_tree'] = action.get_active()
        self.device_finder.scan_subsystems(DEFAULT_SUBSYSTEMS, 
            self.options['parent_tree'])

        self.populate(self.device_finder.get_devices())
        self.expand_toggleaction_toggled_cb(self.expand_toggleaction)

    def expand_toggleaction_toggled_cb(self, action):
        if action.get_active():
            self.devices_tv.expand_all()
        else:
            self.devices_tv.collapse_all()

        self.options['expanded'] = self.expand_toggleaction.get_active()

    def follownew_toggleaction_toggled_cb(self, action):
        self.options['follownew'] = self.follownew_toggleaction.get_active()

    def followchanged_toggleaction_toggled_cb(self, action):
        self.options['followchanged'] = self.followchanged_toggleaction.get_active()

    def reload_action_activate_cb(self, widget):
        self.device_finder.scan_subsystems(DEFAULT_SUBSYSTEMS, 
            self.options['parent_tree'])

        self.populate(self.device_finder.get_devices())
        self.expand_toggleaction_toggled_cb(self.expand_toggleaction)

    def devices_tv_cursor_changed_cb(self, treeview):
        selection = self.devices_tv.get_selection()
        model, selected = selection.get_selected()

        if selected:
            row = self.devices_treestore[selected]
            device = self.device_finder.get_devices_tree()[row[PATH_COL]]

            title = '<b>'+device.nice_label+'</b>'
            if hasattr(device, 'vendor_name'):
                title += '\n<i>%s</i>' % device.vendor_name
            if hasattr(device, 'model_name'):
                title += '\n<i>%s</i>' % device.model_name
            self.devicename_label.set_label(title)

            desc = '\n'.join([': '.join(('<b>'+key.capitalize()+'</b>', 
                str(val))) for key, val in device.get_info().items()])
            self.devicedesc_label.set_label(desc)

            self.deviceprop_store.clear()
            for key, val in device.get_props().items():
                self.deviceprop_store.append([key,
                                              val.decode("string-escape")])

    def about_action_activate_cb(self, widget):
        self.about_dialog.run()

    def help_action_activate_cb(self, widget):
        pass

    def quit_action_activate_cb(self, data=None):
        self.options['devices_hpaned'] = self.devices_hpaned.get_position()
        self.options['eventslog_vpaned'] = self.eventslog_vpaned.get_position()
        self.options['eventslog_expanded'] = self.eventslog_expander.get_expanded()
        self.options['follownew'] = self.follownew_toggleaction.get_active()
        self.options['followchanged'] = self.followchanged_toggleaction.get_active()
        self.saveconf()
        sys.exit(0)

if __name__ == '__main__':
    UDevDiscoverGUI()
    gobject.MainLoop().run()
